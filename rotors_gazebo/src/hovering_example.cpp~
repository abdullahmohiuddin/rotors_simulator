/*
 * Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
 * Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
 * Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
 * Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
 * Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <thread>
#include <chrono>
#include <stdlib.h>
#include <Eigen/Core>
#include <mav_msgs/conversions.h>
#include <mav_msgs/default_topics.h>
#include <ros/ros.h>
#include <std_srvs/Empty.h>
#include <trajectory_msgs/MultiDOFJointTrajectory.h>

int main(int argc, char** argv){
  ros::init(argc, argv, "hovering_example");
  ros::NodeHandle nh;
  ros::Publisher trajectory_pub =
      nh.advertise<trajectory_msgs::MultiDOFJointTrajectory>(
      mav_msgs::default_topics::COMMAND_TRAJECTORY, 10);
  ROS_INFO("Started hovering example.");
  std_srvs::Empty srv;
  bool unpaused = ros::service::call("/gazebo/unpause_physics", srv);
  unsigned int i = 0;
  // Trying to unpause Gazebo for 10 seconds.
  while (i <= 10 && !unpaused) {
    ROS_INFO("Wait for 1 second before trying to unpause Gazebo again");
    std::this_thread::sleep_for(std::chrono::seconds(1));
    unpaused = ros::service::call("/gazebo/unpause_physics", srv);
    ++i;
  }

  if (!unpaused) {
    ROS_FATAL("Could not wake up Gazebo.");
    return -1;
  }
  else {
    ROS_INFO("Unpaused the Gazebo simulation.");
  }
		int ii=0;
		float xx=5;
		float yy=1;
		float zz=3;
		std::string nameofuav = argv[1];
//		ros::Duration(5.0).sleep();

		if (nameofuav=="b") { 
popen("rosrun rotors_gazebo spawn_models.py", "r");}



  // Motion sequence of the first UAV.
		while (ii<7) {
		//ros::Duration(7).sleep();
sleep(9);
		 if (ii==2) {
	//bool onny = ros::service::call("/link_attacher_node/attach "model_name_1: 'firefly' link_name_1: 'left_end_effector' model_name_2: 'cube1' link_name_2: 'link'"", srv);
popen("rosrun rotors_gazebo attach.py", "r");
		//bool	onny2 = ros::service::call("/firefly2/on", srv);
		//bool	onny2 = ros::service::call("/firefly2/on", srv);
	}

		 if (ii==4) {
sleep(2);
	//bool onny = ros::service::call("/link_attacher_node/attach "model_name_1: 'firefly' link_name_1: 'left_end_effector' model_name_2: 'cube1' link_name_2: 'link'"", srv);
//popen("rosrun rotors_gazebo detach.py", "r");
		//bool	onny2 = ros::service::call("/firefly2/on", srv);
		//bool	onny2 = ros::service::call("/firefly2/on", srv);
	}

			if (ii==3) {
		//	bool	offy = ros::service::call("/firefly/off", srv);
		//	bool	offy2 = ros::service::call("/firefly2/off", srv);
}
		ii=ii+1;
		if (nameofuav=="a") { 
		 if (ii==1) {
					xx=0.02; yy=0 ; zz=1;
}

			if (ii==2) {
					xx=0.02; yy=0 ; zz=0.29;
}
			if (ii==3) { 				
					xx=0.02; yy=0 ; zz=3;
}
			if (ii==4) {
					xx=0.02; yy=4 ; zz=3;
}

		ROS_INFO("Moving a"); }

  // Motion sequence of the 2nd UAV.

		if (nameofuav=="b") { 
		 if (ii==1) {
					xx=1.02; yy=0 ; zz=1;
	}
			if (ii==2) {
					xx=1.02; yy=0 ; zz=0.29;
}
			if (ii==3) { 					
     xx=1.02; yy=0 ; zz=3;
}
			if (ii==4) { 					
     xx=1.02; yy=5 ; zz=3;
}

			if (ii==5) { 					
     xx=2; yy=5 ; zz=3;
}
			if (ii==6) { 					
     xx=3; yy=5 ; zz=3;
}
			if (ii==7) { 					
     xx=3; yy=4 ; zz=3;
}

		ROS_INFO("Moving b"); }


  trajectory_msgs::MultiDOFJointTrajectory trajectory_msg;
  trajectory_msg.header.stamp = ros::Time::now();
  Eigen::Vector3d desired_position(xx, yy, zz);
  double desired_yaw = 0.0;
  mav_msgs::msgMultiDofJointTrajectoryFromPositionYaw(desired_position,
      desired_yaw, &trajectory_msg);

  ROS_INFO("Publishing waypoint on namespace  %s: [%f, %f, %f].",
           nh.getNamespace().c_str(),
           desired_position.x(),
           desired_position.y(),
           desired_position.z());
  trajectory_pub.publish(trajectory_msg);
 }
  ros::spin();
}
